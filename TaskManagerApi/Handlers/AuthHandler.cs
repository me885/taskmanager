using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using Microsoft.IdentityModel.Tokens;
using TaskManagerApi.DataModels;

namespace TaskManagerApi.Handlers;

public class AuthHandler
{
    private readonly IUserDatabase userDatabase;

    public AuthHandler(IUserDatabase userDatabase)
    {
        this.userDatabase = userDatabase;
    }

    public async Task<IResult> Register(LoginDetails loginDetails)
    {
        if(await userDatabase.GetUser(loginDetails.name) is not null)
        {
            return Results.Conflict($"Could not create user. The username '{loginDetails.name}' is already in use.");
        }

        var user = await userDatabase.InsertNewUser(loginDetails);
        return Results.Ok(user);
    }

    public async Task<IResult> GetToken(string userName, string password, ConfigurationManager config)
    {
        var user = await userDatabase.GetUser(userName);
        if(IsInvalidUserLogin(user, password))
        {
            return Results.Unauthorized();
        }

        var issuer = config["Jwt:Issuer"];
        var audience = config["Jwt:Audience"];
        var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config["Jwt:Key"]));
        var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

        // Now its ime to define the jwt token which will be responsible of creating our tokens
        var jwtTokenHandler = new JwtSecurityTokenHandler();

        // We get our secret from the appsettings
        var key = Encoding.ASCII.GetBytes(config["Jwt:Key"]);

        // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted

        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new []
            {
                new Claim("Id", user!.id.ToString()),
                new Claim("UserName", userName),
            }),
            // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
            // but since this is a demo app we can extend it to fit our current need
            Expires = DateTime.UtcNow.AddHours(6),
            Audience = audience,
            Issuer = issuer,
            // here we are adding the encryption alogorithim information which will be used to decrypt our token
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
        };

        var token = jwtTokenHandler.CreateToken(tokenDescriptor);

        var jwtToken = jwtTokenHandler.WriteToken(token);

        await Task.CompletedTask;
        return Results.Ok(jwtToken);
    }

    private bool IsInvalidUserLogin(User? user, string password)
    {
        if(user is null)
        {
            return true;
        }
        if(user.password != password)
        {
            return true;
        }

        return false;
    }
}